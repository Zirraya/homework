// Knut_Morris_Prat_Nikitenko.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <vector>
#include <string>

using namespace std;



// Префикс функция
vector<int> Prefix_Function(const string& s) {
    int n = s.length();
    vector<int> pi(n, 0); //вектор для хранения значений префикс-функции

    for (int i = 1; i < n; ++i) {
        int j = pi[i - 1]; //длина предыдущего префикса

        //пока символы не совпадают и j больше 0, уменьшаем j
        while (j > 0 && s[i] != s[j]) {
            j = pi[j - 1];
        }

        //если символы совпадают, увеличиваем j
        if (s[i] == s[j]) {
            j++;
        }

        pi[i] = j; //записываем значение префикс-функции
    }

    return pi;
}
//

//
void KnutMorrisPratt(const string& text, const string& pattern) {
    vector<int> pi = Prefix_Function(pattern);
    int n = text.length();
    int m = pattern.length();
    int j = 0; // индекс для pattern

    for (int i = 0; i < n; i++) {
        while (j > 0 && text[i] != pattern[j]) {
            j = pi[j - 1]; // откат к предыдущему префиксу
        }
        if (text[i] == pattern[j]) {
            j++;
        }
        if (j == m) { // найдено совпадение
            cout << (i - m + 1) << endl;
            j = pi[j - 1]; // продолжаем поиск
        }
    }
}
//

int main() {

    setlocale(LC_ALL, "RUS");
    cout << "Введите строку, желательно используя латинские буквы. \n";
   
    cout << "Ваша строка: ";
    string text, pattern;
    getline(cin, text);
    cout << "Ваша подстрока: ";
    getline(cin, pattern);
    cout << endl;

    cout << "Результат: ";
    KnutMorrisPratt(text, pattern);

    cout << KnutMorrisPratt;

    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
