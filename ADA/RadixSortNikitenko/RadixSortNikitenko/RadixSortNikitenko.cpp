// RadixSortNikitenko.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Функция для получения максимального элемента в массиве
int getMax(const vector<int>& arr) {
    return *max_element(arr.begin(), arr.end());
}
//

// Функция для сортировки массива по разряду
void countingSort(vector<int>& arr, int exp) {

    int n = arr.size();
    vector<int> output(n); // Временный массив для хранения отсортированных элементов
    int count[10] = { 0 }; // Массив для подсчета вхождений (0-9)

    // Подсчет вхождений для текущего разряда
    for (int i = 0; i < n; i++) {
        count[(arr[i] / exp) % 10]++;
    }
    //

    // Изменение count[i], чтобы count[i] содержал позицию этого разряда в output
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }
    //

    // Выходной массив
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }
    //

    // Копирование отсортированных элементов обратно в массив
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
    //
}
//

// Основная функция поразрядной сортировки
void radixSort(vector<int>& arr) {
    int maxVal = getMax(arr); // Нахождение максимального элемента
    for (int exp = 1; maxVal / exp > 0; exp *= 10) {
        countingSort(arr, exp);
    }
}
//

int main()
{
    setlocale(LC_ALL, "RUS");

    int n;
    cout << "Введите количество элементов в массиве: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Введите элементы массива: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    radixSort(arr); // Вызов функции

    cout << "Отсортированный массив: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
