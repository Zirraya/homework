// QuickSortNikitenko.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <vector>
#include <cstdlib> // Для rand() и srand()
#include <ctime>   // Для time()
#include <chrono>  // Для измерения времени

using namespace std;

//  Для опорного элемента и разделеения массива элемента
int partition(vector<int>& arr, int low, int high) {

    
    int pivot = arr[high]; // Выбор опорной точки

   
    int i = low - 1; // Индекс наименшьего элемента распологается справа от опорного элемнта

        // Прохождение arr[low..high] и перемещещние все меньших
       // элементы слева. Элементы от low до  high
       // i уменьшается после каждой итерации
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i + 1], arr[high]); // Передвижение опорного элемента после меньших элементов
    return i + 1;   // Возвращение позиций 
}
//

// Функция быстрой сортировки
void quickSort(vector<int>& arr, int low, int high) {
    while (low < high) {
        int pi = partition(arr, low, high); // Возвращает индекс опорного элемента

        // Рекурсивные вызовы для меньших и больших элементов
        if (pi - low < high - pi) {
            quickSort(arr, low, pi - 1);
            low = pi + 1; // Избегаем переполнения стека
        }
        else {
            quickSort(arr, pi + 1, high);
            high = pi - 1; // Избегаем переполнения стека
        }
    }
}
//


int main()
{
    setlocale(LC_ALL, "RUS");

    int n;
    cout << "Введите количество элементов в массиве: ";
    cin >> n;

    vector<int> arr(n);

    // Инициализация генератора случайных чисел
    srand(static_cast<unsigned int>(time(0)));

    // Генерация случайных элементов массива
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100; // Генерация случайного числа от 0 до 99
    }

    //// Вывод исходного массива
    //cout << "Исходный массив: ";
    //for (int i = 0; i < n; i++) {
    //    cout << arr[i] << " ";
    //}
    //cout << endl;

    // Измерение времени сортировки
    auto start = chrono::high_resolution_clock::now();

    // Сортировка массива
    quickSort(arr, 0, n - 1);

    auto end = chrono::high_resolution_clock::now();

    //// Вывод отсортированного массива
    //cout << "Отсортированный массив: ";
    //for (int i = 0; i < n; i++) {
    //    cout << arr[i] << " ";
    //}
    //cout << endl;

    // Вывод времени выполнения сортировки
    cout << "Время выполнения сортировки: "
        << chrono::duration<double, milli>(end - start).count()
        << " миллисекунд." << endl;

    return 0;

}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
