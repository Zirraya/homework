#pragma once

namespace NikitenkoTask1211 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	// Массив вещесвтенных чисел для хранения отрезков (КРОЛИК)
	float lines[] = {
		// голова
		0.5f,3.f,1.f,4.5f, // от левой щеки вверх до уха
		1.f,4.5f,0.5f,6.f, // левое ухо слева снизу вверх
		0.5f,6.f,0.5f, 7.5f, // левое ухо слева
		0.5f, 7.5f,1.f,8.f, // левое ухо верх слева
		1.f,8.f,1.5f,8.f, // левое ухо верх середина
		1.5f,8.f,2.f,7.5f, // левое ухо верх справа
		2.f,7.5f,1.5f, 6.f, // левое ухо справа сверху вниз
		1.5f, 6.f,1.5f,4.5f, // левое ухо справа до макушки
		1.5f,4.5f,3.f,4.5f, // макушка
		3.f,4.5f,3.f,6.f, // правое ухо слева снизу вверх
		3.f,6.f,2.5f,7.5f, // правое ухо слева
		2.5f,7.5f,3.f,8.f, // правое ухо верх слева
		3.f,8.f,3.5f,8.f, // правое ухо верх середина
		3.5f,8.f,4.f,7.5f, // правое ухо верх справа
		4.f,7.5f,4.f,6.f, // правое ухо сверху вниз
		4.f,6.f,3.5f,4.5f, // правое ухо справа
		3.5f,4.5f,4.f,3.f, // от правого уха вниз до щеки
		4.f,3.f,3.5f,1.5f, // правая скула
		3.5f,1.5f,2.5f,1.f, // подбородок справа
		2.5f,1.f,2.f,1.f, // подбородок снизу
		2.f,1.f,1.f,1.5f, // подбородок слева
		1.f,1.5f,0.5f,3.f, // левая скула
		// туловище
		4.f,3.f,5.5f,3.5f, // спина от головы вправо
		5.5f,3.5f,7.f,3.5f, // спина верх
		7.f,3.5f,7.5f,2.5f, // спина сверху до хвоста
		7.5f,2.5f,8.f,2.5f, // хвост сверху
		8.f,2.5f,8.f,2.f, // хвост справа
		8.f,2.f,7.5f,2.f, // хвост низ справа налево
		7.5f,2.f,7.5f,0.5f, // задняя нога справа сверху вниз
		7.5f,0.5f,6.5f,0.5f, // задняя нога низ
		6.5f,0.5f,6.5f,1.f, // задняя нога слева
		6.5f,1.f,6.f,1.f, // между задних ног
		6.f,1.f,6.f,0.5f, // левая задняя нога справа
		6.f,0.5f,5.f,0.5f, // левая задняя нога низ
		5.f,0.5f,5.f,1.f, // левая задняя нога слева
		5.f,1.f,4.f,1.f, // между задними и передними ногами
		4.f,1.f,4.f,0.5f, // правая передняя нога справа
		4.f,0.5f,3.f,0.5f, // правая передняя нога низ
		3.f,0.5f,3.f,1.f, // правая передняя нога слева
		3.f,1.f,2.5f,1.f, // между передних ног
		2.5f,1.f,2.5f,0.5f, // передняя нога справа
		2.5f,0.5f,1.5f,0.5f, // передняя нога низ
		1.5f,0.5f,1.5f,1.25f, // передняя нога слева

		// левый глаз
		1.5f,3.5f,1.5f,3.f, // левый глаз слева сверху вниз
		1.5f,3.f,2.f,3.f, // левый глаз низ
		2.f, 3.f,2.f,3.5f, // левый глаз справа
		2.f,3.5f,1.5f,3.5f, // левый глаз верх
		// правый глаз
		2.5f,3.5f,2.5f,3.f, // правый глаз слева
		2.5f,3.f,3.f, 3.f, // правый глаз снизу
		3.f,3.f,3.f,3.5f, // правый глаз справа
		3.f,3.5f,2.5f,3.5f, // правый глаз сверху
		// ушные раковины
		1.f,5.5f,1.f,7.f, // левая ушная раковина
		3.5f,5.5f,3.5f,7.f, // правая ушная раковина
		// нос
		2.f,2.5f,2.5f,2.5f, // нос сверху
		2.5f,2.5f,2.25f,2.f, // нос справа
		2.25f,2.f,2.f,2.5f // нос слева
	};
//
	

	// Массив вещесвтенных чисел для хранения отрезков (РЫБА)
	float linesFish[] = {
		// Тело верхняя часть
		// x, y начало отрезка x, y конец отрезка
		1.5f, 3.5f,		2.0f, 4.5f,	// кончик носа
		2.0f, 4.5f,		2.5f, 5.0f,	// середина головы
		2.5f, 5.0f,		3.5f, 5.4f, // конец головы, из конца отреза начинается плавник
		3.5f, 5.4f,		5.0f, 5.4f, // плоская часть головы, из конца отрезка начинается жабры и середнина плавника
		5.0f, 5.4f,		6.5f, 5.0f, // спина, из середины часть плавника
		6.5f, 5.0f,		7.5f, 4.5f, // продолжение спины, из середниы начинается хвост
		7.5f, 4.5f,		8.5f, 4.0f, //
		8.5f, 4.0f,		9.1f, 3.0f,
		//

		// Рот
		1.5f, 3.5f,		1.9f, 3.5f,
		1.9f, 3.5f,		2.3f, 3.2f, // верхняя челюсть
		2.3f, 3.2f,		1.9f, 2.7f, // нижняя челюсть
		//

		// Тело нижняя часть
		1.9f, 2.7f,		3.5f, 1.7f, // от нижней челюсти до начала брюха
		3.5f, 1.7f,		5.0f, 1.3f,	// от начала брюха, до середины брюха
		5.0f, 1.3f,		9.1f, 3.0f,	// от середины брюха до хвоста
		//

		// Глаз
		3.0f, 3.5f,		3.0f, 4.0f, // передняя часть
		3.0f, 4.0f,		3.5f, 4.5f, // к верхней части линия
		3.5f, 4.5f,		4.0f, 4.5f, // верхняя часть
		4.0f, 4.5f,		4.5f, 4.0f, // к  задней части
		4.5f, 4.0f,		4.5f, 3.5f, // задняя часть
		4.5f, 3.5f,		4.0f, 3.0f, // линия к нижней части
		4.0f, 3.0f,		3.5f, 3.0f, // нижняя часть
		3.5f, 3.0f,		3.0f, 3.5f, // линя к передней части
		// Зрачок
		3.5f, 3.5f,		3.5f, 3.0f, // передняя часть
		3.5f, 3.5f,		4.0f, 3.5f,	// верхняя часть
		4.0f, 3.5f,		4.0f, 3.0f, //задняя часть
		//

		//

		// Жабры
		4.8f, 5.4f,		5.5f, 4.5f, // жабры от конца плоской части
		5.5f, 4.5f,		4.8f, 3.5f, // жабры продолжение, зигзаг к глазу
		4.8f, 3.5f,		5.5f, 2.5f, // жабры продолжение зигзаг от глаза
		5.5f, 2.5f,		4.7f, 2.0f, // жабры продолжение зигзаг в обратную сторону тут что пошло не так исправить
		4.7f, 2.0f,		5.0f, 1.3f,
		//

		// Хвост
		7.5f, 4.5f,		9.5f, 5.0f, // начало хвоста от верха
		9.5f, 5.0f,		10.0f, 6.0f, // хвост вверх
		10.0f, 6.0f,	10.3f, 6.3f, // начало сгиба
		10.3f, 6.3f,	11.3f, 6.8f, // сгиб
		11.3f, 6.8f,	11.8f, 6.8f, // кончик
		11.8f, 6.8f,	11.3f, 6.3f, // кончик продолжение зигзаг в обратную
		11.3f, 6.3f,	11.0f, 5.0f, // хвост начинает идти вниз
		11.0f, 5.0f,	10.7f, 4.5f, // изгиб хвоста вниз
		10.7f, 4.5f,	10.3f, 4.0f, // середина хвоста
		10.3f, 4.0f,	10.7f, 3.5f, // начало изгиба середины хвоста
		10.7f, 3.5f,	11.0f, 2.5f, // изгиб хвоста
		11.0f, 2.5f,	11.3f, 1.3f, // от конца этого отрезка начинается кончик
		11.3f, 1.3f,	11.8f, 0.7f, // кончик
		11.8f, 0.7f,	11.3f, 0.7f, // кончик в обратную сторону
		11.3f, 0.7f,	10.3f, 1.3f, // хвост начинает итди к телу
		10.3f, 1.3f,	10.0f, 1.6f, // сгиб
		10.0f, 1.6f,	9.8f, 2.2f, // из конца отрезка начинается отрезок идущий к телу
		9.8f, 2.2f,		9.1f, 3.0f, // хвост идет к телу
		//

		// Верхний плавник
		3.5f, 5.4f,		4.5f, 7.4f, // плавник начало от головы 
		4.5f, 7.4f,		4.5f, 6.4f, // плавник вниз 

		3.9f, 5.4f,		4.5f, 6.4f, // второй луч плавника 
		4.5f, 6.4f,		4.8f, 6.8f, // конец луча сгиб
		4.8f, 6.8f,		4.8f, 5.9f, // вниз

		4.3f, 5.4f,		5.2f, 6.4f, // третий луч плавника
		5.2f, 6.4f,		5.2f, 5.6f, // вниз

		4.8f, 5.4f,		5.2f, 5.6f, // четвертый луч плавника
		5.2f, 5.6f,		5.5f, 5.9f, // конец луча сгиб
		5.5f, 5.9f,		5.5f, 5.4f, // вниз

		5.2f, 5.3f,		5.5f, 5.4f, // пятый луч плавника
		5.5f, 5.4f,		6.0f, 5.7f, // конец луча сгиб
		6.0f, 5.7f,		6.0f, 5.1f, // вниз

		6.0f, 5.1f,		6.5f, 5.4f, // шестой луч плавника
		6.5f, 5.4f,		6.5f, 5.0f, // вниз
		//

		// Нижний плавник
		4.9f, 2.1f,		8.5f, 2.1f, // первый луч
		8.5f, 2.1f,		8.8f, 1.8f, // соеденение со вторым лучом
		4.9f, 2.1f,		8.8f, 1.8f, // второй луч
		8.8f, 1.8f,		8.8f, 1.5f, // соеденение с третьем лучом
		4.9f, 2.1f,		8.8f, 1.5f, // третий луч
		8.8f, 1.5f,		8.8f, 1.2f, // соеденение с четвертым лучом
		4.9f, 2.1f,		8.8f, 1.2f, // четвертый луч
		8.8f, 1.2f,		8.0f, 0.6f, // соеденение с пятым лучом
		4.9f, 2.1f,		8.0f, 0.6f, // пятый луч
		8.0f, 0.6f,		6.5f, 1.0f,	// соеденение с шестым лучом
		4.9f, 2.1f,		6.5f, 1.0f, // шестой луч
		//

		// Пузыри
		// Пузырек в форме ромба в левом нижнем углу
		1.9f, 1.5f,		2.3f, 1.1f, // в право вниз
		2.3f, 1.1f,		1.9f, 0.7f, // в лево вниз
		1.9f, 0.7f,		1.5f, 1.1f, // в в лево вверх
		1.5f, 1.1f,		1.9f, 1.5f, // в право вверх
		// 

		// Пузырек в форме ромба в левом вверхнем углу
		1.5f, 5.4f,		1.9f, 5.8f,	// в право вверх
		1.9f, 5.8f,		1.5f, 6.2f, // в лево вверх
		1.5f, 6.2f,		1.1f, 5.8f, // в лево вниз
		1.1f, 5.8f,		1.5f, 5.4f, // в право вниз 
		//

		//  Пузырек в форме ромба в левом верхнем углу, правее прудыдущего
		1.9f, 6.6f,		2.3f, 7.0f, // в право вверх
		2.3f, 7.0f,		2.7f, 6.6f, // в право вниз
		2.7f, 6.6f,		2.3f, 6.2f, // в лево вниз
		2.3f, 6.2f,		1.9f, 6.6f, // в лево вверх
		//

		//  Пузырек в форме ромба между верхним плавником и хвостом
		9.1f, 6.8f,		9.5f, 7.2f, // в праввво вверх
		9.5f, 7.2f,		9.1f, 7.6f, // в лево вверх
		9.1f, 7.6f,		8.7f, 7.2f, // в лево вниз
		8.7f, 7.2f,		9.1f, 6.8f, // в право вниз
		//


		//  Пузырек в форме ромба справо от ховста
		12.2f, 5.7f,	12.6f, 6.1f, // в право вверх
		12.6f, 6.1f,	12.2f, 6.5f, // в лево вверх
		12.2f, 6.5f,	11.8f, 6.1f, // в лево вниз
		11.8f, 6.1f,	12.2f, 5.7f, // в право вниз
		//

		// Пузырек большой в форме ромба справо от хвоста и ниже маленького пузырька
		12.2f, 5.0f,	13.2f, 4.0f, // в право вниз
		13.2f, 4.0f,	12.2f, 3.0f, // в лево вниз
		12.2f, 3.0f,	11.2f, 4.0f, // в лево вверх
		11.2f, 4.0f,	12.2f, 5.0f, // в право вверх
		//


		// Пузырек в форме круга в левом верхнем углу
		2.7f, 6.6f,		2.3f, 6.6f, // из правого угла в лево
		2.3f, 6.6f,		1.9f, 7.0f, // в лево вверх
		1.9f, 7.0f,		1.9f, 7.4f, // вверх
		1.9f, 7.4f,		2.3f, 7.8f, // в право вверх
		2.3f, 7.8f,		2.7f, 7.8f, // в право
		2.7f, 7.8f,		3.1f, 7.4f, // в право вниз 
		3.1f, 7.4f,		3.1f, 7.0f, // вниз
		3.1f, 7.0f,		2.7f, 6.6f, // к исходной точке
		// 

		// Пузырек в форме круга между верхним плавником и хвостом
		9.1f, 7.2f,		8.3f, 7.2f, // влево
		8.3f, 7.2f,		7.9f, 6.8f, // влево вниз
		7.9f, 6.8f,		7.9f, 6.0f, // вниз
		7.9f, 6.0f,		8.3f, 5.6f, // в право вниз
		8.3f, 5.6f,		9.1f, 5.6f,	// вправо
		9.1f, 5.6f,		9.5f, 6.0f, // в право вверх
		9.5f, 6.0f,		9.5f, 6.8f, // вверх
		9.5f, 6.8f,		9.1f, 7.2f, // влево вверх
		// 
		// 
	};
//
	unsigned int arrayLength = sizeof(linesFish) / sizeof(float);
	unsigned int arrayLengthR = sizeof(lines) / sizeof(float);
	float Vx = 8.5f; // размер рисунка по горизонтали
	float Vy = 8.5f; // размер рисунка по вертикали
	float aspectFig = Vx / Vy; // соотношение сторон рисунка
	//

	/// <summary>
	/// Сводка для Painting
	/// </summary>
	public ref class Painting : public System::Windows::Forms::Form
	{
	public:
		Painting(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~Painting()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->SuspendLayout();
			// 
			// Painting
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(8, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(920, 483);
			this->DoubleBuffered = true;
			this->Name = L"Painting";
			this->Text = L"Painting";
			this->Load += gcnew System::EventHandler(this, &Painting::Painting_Load);
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &Painting::Painting_Paint);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &Painting::Painting_KeyDown);
			this->Resize += gcnew System::EventHandler(this, &Painting::Painting_Resize);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: bool keepAspectRatio; // значение - сохранять ли соотношение сторон рисунка?
	private: bool changeImage; // замена изображения
	
	private: System::Void Painting_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e) {

		Graphics^ g = e->Graphics;
		g->Clear(Color::SteelBlue);

		// Перо
		Pen^ orangePen = gcnew Pen(Color::OrangeRed, 2.5f);

		float Wx = ClientRectangle.Width; // размер окна по горизонтали
		 float Wy = ClientRectangle.Height; // размер окна по вертикали
		
		float aspectForm = Wx / Wy; // соотношение сторон окна рисования
		 float Sx, Sy;
		 if (keepAspectRatio) {
			 // коэффициенты увеличения при сохранении исходного соотношения сторон
				 Sx = Sy = aspectFig < aspectForm ? Wy / Vy : Wx / Vx;
			
		}
		 else {
			 Sx = Wx / Vx; // коэффициент увеличения по оси Ox
			 Sy = Wy / Vy; // коэффициент увеличения по оси Oy	
		}

		 if (!changeImage) { // Кролик
			 float Ty = Sy * Vy; // смещение в положительную сторону по оси Oy после смены знака
			 for (int i = 0; i < arrayLengthR; i += 4) {
				 g->DrawLine(orangePen, Sx * lines[i], Ty - Sy * lines[i + 1], Sx * lines[i + 2], Ty - Sy * lines[i + 3]);
			 }

			 
		 }
		 else { // Рыбка
			 float TyF = Sy * Vy; // смещение в положительную сторону по оси Oy после смены знака
			 for (int i = 0; i < arrayLength; i += 4) {
				 g->DrawLine(orangePen, Sx * linesFish[i], TyF - Sy * linesFish[i + 1], Sx * linesFish[i + 2], TyF - Sy * linesFish[i + 3]);
			 }

			 
		 }
		//
	}
	private: System::Void Painting_Resize(System::Object^ sender, System::EventArgs^ e) {
		Refresh();
	}

	private: System::Void Painting_Load(System::Object^ sender, System::EventArgs^ e) {
		keepAspectRatio = true; // начальное значение: сохранять соотношение сторон рисунка
	}
	private: System::Void Painting_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
	

		switch (e->KeyCode) {
		 case Keys::M:
			 keepAspectRatio = !keepAspectRatio;
			 break;
		 default:
			 break;	
		}

		switch (e->KeyCode) {
		case Keys::N:
			changeImage = !changeImage;
			break;
		default:
			break;
		}
		Refresh();
	}
	};
}
