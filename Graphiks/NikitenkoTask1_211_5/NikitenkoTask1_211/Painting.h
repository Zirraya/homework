#pragma once


namespace NikitenkoTask1211 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Diagnostics; 
	using namespace std;


	vec3 Vc; // координаты дальнего левого нижнего угла
	vec3 V; // размеры параллелепипеда в пространстве графика
	vec3 Vc_work, V_work; // рабочие параметры параллелепипеда

	mat4 T; // матрица, в которой накапливаются все преобразования
	mat4 initT; // матрица начального преобразования

	/// <summary>
	/// Сводка для Painting
	/// </summary>
	public ref class Painting : public System::Windows::Forms::Form
	{
	public:
		Painting(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~Painting()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::OpenFileDialog^ openFileDialog;
	private: System::Windows::Forms::Button^ btnOpen;
	protected:

	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->openFileDialog = (gcnew System::Windows::Forms::OpenFileDialog());
			this->btnOpen = (gcnew System::Windows::Forms::Button());
			this->SuspendLayout();
			// 
			// openFileDialog
			// 
			this->openFileDialog->DefaultExt = L"txt";
			this->openFileDialog->Filter = L" (*.txt)|*.txt|Все файлы (*.*)|*.*";
			this->openFileDialog->Title = L"Открыть файл";
			// 
			// btnOpen
			// 
			this->btnOpen->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right));
			this->btnOpen->AutoSize = true;
			this->btnOpen->Location = System::Drawing::Point(729, 12);
			this->btnOpen->Name = L"btnOpen";
			this->btnOpen->Size = System::Drawing::Size(97, 49);
			this->btnOpen->TabIndex = 0;
			this->btnOpen->Text = L"Открыть";
			this->btnOpen->UseVisualStyleBackColor = true;
			this->btnOpen->Click += gcnew System::EventHandler(this, &Painting::btnOpen_Click);
			// 
			// Painting
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(8, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(857, 438);
			this->Controls->Add(this->btnOpen);
			this->DoubleBuffered = true;
			this->KeyPreview = true;
			this->Name = L"Painting";
			this->Text = L"Painting";
			this->Load += gcnew System::EventHandler(this, &Painting::Painting_Load);
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &Painting::Painting_Paint);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &Painting::Painting_KeyDown);
			this->Resize += gcnew System::EventHandler(this, &Painting::Painting_Resize);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: bool keepAspectRatio; // значение - сохранять ли соотношение сторон рисунка?
	private: bool changeImage; // замена изображения

	 private: float left = 30, right = 100, top = 20, bottom = 50; // расстояния до границ окна
			  float minX = left, maxX; // диапазон изменения координат x
			  float minY = top, maxY; // диапазон изменения координат y
			  float Wcx = left, Wcy; // координаты левого нижнего угла прямоугольника
			  float Wx, Wy; // ширина и высота прямоугольника
			  float Wx_work, Wy_work; // ширина и высота области вывода одной линии графика
			  float Wx_part = 0.6, Wy_part = 0.6; // доля Wx_work, Wy_work от Wx, Wy соответственно
			  float Wcx_work, Wcy_work; // координаты левого нижнего у
			  float Wz_work; // количество рабочих прямоугольников
			  int numXsect = 5, numYsect = 5, numZsect = 5; // количество секций координатной сетки по осям


	private: System::Void rectCalc() {
		maxX = ClientRectangle.Width - right; // диапазон изменения координат x
		maxY = ClientRectangle.Height - bottom; // диапазон изменения координат y
		Wcy = maxY; // координаты левого нижнего угла прямоугольника
		Wx = maxX - left; // ширина прямоугольника
		Wy = maxY - top; // ширина и высота прямоугольника

		Wx_work = Wx_part * Wx; // вычисление ширины и высоты
		Wy_work = Wy_part * Wy; // рабочего прямоугольника
		Wcx_work = maxX - Wx_work; // вычисление координат нижнего левого
		Wcy_work = minY + Wy_work; // угла самого дальнего рабочего прямоугольника
		Wz_work = Wcy - Wcy_work; // количество рабочих прямоугольников

	}

	private: System::Void worldRectCalc() {
		Vc_work = normalize(T * vec4(Vc, 1.f));
		V_work = mat3(T) * V;

	}

		 private: float f(float x, float z) 
		 {
			 return x * sin(sqrtf(x * x + z * z));
		 }

		private: bool f_exists(float x, float z, float delta) 
		{
			return true;
		}




	private: System::Void Painting_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e) {

		Graphics^ g = e->Graphics;
		g->Clear(Color::PowderBlue);

		Pen^ rectPen = gcnew Pen(Color::Black, 2);
		g->DrawRectangle(rectPen, left, top, Wx, Wy);	


		// ВЫЧЕРЧИВАНИЕ КООРДИНАТНОЙ СЕТКИ
		 Pen ^ gridPen = gcnew Pen(Color::Black, 1);
		 SolidBrush ^ drawBrush = gcnew SolidBrush(Color::Black);
		 System::Drawing::Font ^ drawFont = gcnew System::Drawing::Font("Arial", 8);
		
			 // координатная сетка по x
			 float gridStep_x = Wx_work / numXsect; // расстояние между линиями сетки по x
		 float grid_dX = V_work.x / numXsect; // расстояние между линиями сетки по x в мировых координатах
		 float tick_x = Vc_work.x; // значение, соответствующее первой линии сетки
		 for (int i = 0; i <= numXsect; i++) { // цикл по количеству линий
			 float tmpXCoord_d = Wcx + i * gridStep_x; // нижняя координата x i-й диагональной линии
			 float tmpXCoord_v = Wcx_work + i * gridStep_x; // координата x i-й вертикальной линии
			 // i-я диагональная линия
				 g->DrawLine(gridPen, tmpXCoord_d, Wcy, tmpXCoord_v, Wcy_work);
			 // i-я вертикальная линия
				 g->DrawLine(gridPen, tmpXCoord_v, Wcy_work, tmpXCoord_v, minY);
			 if (i > 0 && i < numXsect) // если линия не крайняя
				 // выводим текст в нижней точке диагональной линии
				 g->DrawString(tick_x.ToString("F4"), drawFont, drawBrush, tmpXCoord_d, Wcy);
			 tick_x += grid_dX; // вычисляем значение, соответствующее следующей линии
			
		}
		
			 // координатная сетка по z
			 gridStep_x = (Wx - Wx_work) / numZsect; // расстояние между вертикальными линиями сетки по горизонтали
		 float gridStep_y = Wz_work / numZsect; // расстояние между горизонтальными линиями сетки по вертикали
		 float grid_dZ = V_work.z / numZsect; // расстояние между линиями сетки по $z$ в мировых координатах
		 float tick_z = Vc_work.z; // значение, соответствующее первой линии сетки
		 for (int i = 0; i <= numZsect; i++) { // цикл по количеству линий
			 float tmpXCoord_v = Wcx_work - i * gridStep_x; // координата x вертикальных линий
			 float tmpYCoord_g = Wcy_work + i * gridStep_y; // координата y горизонтальных линий
			 float tmpXCoord_g = tmpXCoord_v + Wx_work; // вторая координата x горизонтальных линий
			 // i-я вертикальная линия
				 g->DrawLine(gridPen, tmpXCoord_v, tmpYCoord_g, tmpXCoord_v, tmpYCoord_g - Wy_work);
			 // i-я горизонтальная линия
				 g->DrawLine(gridPen, tmpXCoord_v, tmpYCoord_g, tmpXCoord_g, tmpYCoord_g);
			 if (i > 0 && i < numZsect) // если линия не крайняя
				 // выводим текст в правой точке горизонтальной линии
				 g->DrawString(tick_z.ToString("F4"), drawFont, drawBrush, tmpXCoord_g, tmpYCoord_g);
			 tick_z += grid_dZ; // вычисляем значение, соответствующее следующей линии
			
		}





		// ОТРИСОВКА ГРАФИКА
		 Pen ^ pen = gcnew Pen(Color::Blue, 1);
		 float deltaX = V_work.x / Wx_work; // шаг по x в мировых координатах
		 float deltaZ = V_work.z / Wz_work; // шаг по z в мировых координатах
		
			
			 float deltaWcx = (Wcx_work - Wcx) / Wz_work; // шаг прямоугольников по x в координатах экрана
		
			 bool hasStart;
		
			 // цикл по прямоугольникам
			 float z = Vc_work.z; // координата z соответствующая дальнему прямоугольнику
		 // координаты левого нижнего угла рабочего прямоугольника (инициализация)
			 float Wcx_w = Wcx_work, Wcy_w = Wcy_work;
		 while (Wcy_w <= Wcy) { // пока не перебрали все прямоугольники
			 vec2 start, end; // концы отрезка в координатах экрана
			 float x, y; // переменные для координат точки в мировой СК
			 start.x = Wcx_w; // для начальной точки первого отрезка устанавливаем координату x
			 x = Vc_work.x; // координата x начальной точки первого отрезка в мировых координатах
			 hasStart = f_exists(x, z, deltaX);
			 if (hasStart) {
				 y = f(x, z); // координата y начальной точки в мировых координатах
				 // вычисляем соответствующее значение в координатах экрана
					 start.y = Wcy_w - (y - Vc_work.y) / V_work.y * Wy_work;
				
			}
			 float maxX = Wcx_w + Wx_work; // максимальное значение x в рабочем прямоугольнике
			 while (start.x < maxX) {
				 vec2 end; // точка конца отрезка в координатах экрана
				 bool hasEnd;
				 float deltaY; // высота точки в прямоугольнике (доля общей высоты)
				 float red, green, blue; // компоненты цвета отрезка
				 end.x = start.x + 1.f; // координата x отличается на единицу
				 x += deltaX; // координата x конечной точки отрезка в мировых координатах
				 hasEnd = f_exists(x, z, deltaX);
				 if (hasEnd) {
					 y = f(x, z); // координата y начальной точки в мировых координатах
					 // вычисляем соответствующее значение в координатах экрана
						 deltaY = (y - Vc_work.y) / V_work.y;
					 end.y = Wcy_w - deltaY * Wy_work;
					
				}
				 vec2 tmpEnd = end;
				 bool visible = hasStart && hasEnd && clip(start, end, minX, minY, maxX, maxY);
				 if (visible) { // если отрезок видим
					 // после отсечения, start и end - концы видимой части отрезка
						 // вычичление цвета отрезка
						 if (deltaY > 1.f) deltaY = 1.f; // нормализуем значение высоты точки
					 if (deltaY < 0.f) deltaY = 0.f; // на случай, если отрезок отсекался
					 green = 510.f * deltaY; // предварительное вычисление произведения
					 if (deltaY < 0.5) { // если точка ниже середины области видимости
						 // компонента зеленого уже вычислена
							 blue = 255.f - green; // синий дополняет зеленый
						 red = 0.f; // красный равен нулю
						
					}
					 else { // если точка не ниже середины
						 blue = 0.f; // синий равен нулю
						 red = green - 255.f; // вычисляем красный и зеленый
						 green = 510.f - green; // с использованием вычисленного произведения
						
					}
					 pen->Color = Color::FromArgb(red, green, blue); // меняем цвет пера
					 // отрисовка отрезка
						 g->DrawLine(pen, start.x, start.y, end.x, end.y); // отрисовка видимых частей
					
				}
				 // конечная точка неотсеченного отрезка становится начальной точкой следующего
					 start = tmpEnd;
				 hasStart = hasEnd;
				
			}
			 Wcy_w += 1.f; // переходим к следующему прямоугольнику, он будет ниже на один пиксел
			 Wcx_w -= deltaWcx; // и левее на некоторое значение
			 z += deltaZ; // вычисляем соответствующее значение z для очередного прямоугольника
			
		}


	}
	private: System::Void Painting_Resize(System::Object^ sender, System::EventArgs^ e) {
		rectCalc();
		Refresh();
	}

	private: System::Void Painting_Load(System::Object^ sender, System::EventArgs^ e) {
		initT = mat4(1.f);
		T = initT;

		Vc = vec3(-2.f, -2.f, -2.f);
		V = vec3(4.f, 4.f, 4.f);


		rectCalc();
		worldRectCalc();

	}
	private: System::Void Painting_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {

		float centerX = Vc_work.x + V_work.x / 2; // координаты центра параллелепипеда
		float centerY = Vc_work.y + V_work.y / 2; // в мировой системе координат
		float centerZ = Vc_work.z + V_work.z / 2;


		float Wcx = ClientRectangle.Width / 2.f; // координаты центра
		float Wcy = ClientRectangle.Height / 2.f; // текущего окна



		switch (e->KeyCode) {

		case Keys::Escape:
			T = initT;
			break;

		case Keys::A:
			T = translate(-V_work.x / Wx, 0.f, 0.f) * T; // сдвиг графика вправо на один, пиксел
			break;

		case Keys::Z:
			T = translate(-centerX, -centerY, -centerZ) * T; // перенос начала координат в центр
			T = scale(1.1, 1.1, 1.1) * T; // масштабирование относительно начала координат
			T = translate(centerX, centerY, centerZ) * T; // возврат позиции начала координат
			break;

		}
		worldRectCalc();
		Refresh();
	}
	private: System::Void btnOpen_Click(System::Object^ sender, System::EventArgs^ e) {

		//if (openFileDialog->ShowDialog() == System::Windows::Forms::DialogResult::OK) {
		//	 // в файловом диалоге нажата кновка OK
		//		 // перезапись имени файла из openFileDialog->FileName в fileName
		//		 wchar_t fileName[1024]; // переменная, в которой посимвольно сохраним имя файла
		//	 for (int i = 0; i < openFileDialog->FileName->Length; i++)
		//		 fileName[i] = openFileDialog->FileName[i];
		//	 fileName[openFileDialog->FileName->Length] = '\0';
		//	
		//		 // объявление и открытие файла
		//		 ifstream in;
		//	 in.open(fileName);
		//	 if (in.is_open()) {
		//		
		//			 // файл успешно открыт
		//		 models.clear(); // очищаем имеющийся список рисунков
		//		 // временные переменные для чтения из файла

		//		 mat3 M = mat3(1.f); // матрица для получения модельной матрицы
		//		 mat3 initM; // матрица для начального преобразования каждого рисунка
		//		 vector<mat3> transforms; // стек матриц преобразований
		//		 vector<path> figure; // список ломаных очередного рисунка

		//		float thickness = 2; // толщина со значением по умолчанию 2
		//		 float r, g, b; // составляющие цвета
		//		 r = g = b = 0; // значение составляющих цвета по умолчанию (черный)
		//		 string cmd; // строка для считывания имени команды
		//		 // непосредственно работа с файлом
		//			 string str; // строка, в которую считываем строки файла
		//		 getline(in, str); // считываем из входного файла первую строку
		//		 while (in) { // если очередная строка считана успешно
		//			 // обрабатываем строку
		//			 if ((str.find_first_not_of(" \t\r\n") != string::npos) && (str[0] != '#')) {
		//				 // прочитанная строка не пуста и не комментарий
		//				 stringstream s(str); // строковый поток из строки str
		//				 s >> cmd;
		//				 if (cmd == "frame") { // размеры изображения

		//					 s >> Vx >> Vy; // считываем глобальные значение Vx и Vy

		//					 float Wx = ClientRectangle.Width - left - right; // ширина прямоугольника
		//					 float Wy = ClientRectangle.Height - top - bottom; // высота прямоугольника
		//					 float aspectRect = Wx / Wy; // соотношение сторон прямоугольника
		//					 // коэффициент увеличения при сохранении исходного соотношения сторон

		//					// смещение центра рисунка с началом координат
		//					 mat3 T1 = translate(-Vx / 2, -Vy / 2);
		//					 // масштабирование остается прежним, меняется только привязка
		//					 // коэффициент увеличения при сохранении исходного соотношения сторон
		//					 float S = aspectFigR < aspectRect ? Wy / Vy : Wx / Vx;
		//					 mat3 S1 = scale(S, -S);
		//					 // сдвиг точки привязки из начала координат в нужную позицию
		//					 mat3 T2 = translate(Wx / 2 + Wcx, Wcy - Wy / 2);
		//					 // В initT совмещаем эти три преобразования (справа налево)
		//					 initTR = T2 * (S1 * T1);

		//					 TR = initTR;

		//				 }
		//				 else if (cmd == "color") { // цвет линии
		//					 s >> r >> g >> b; // считываем три составляющие цвета

		//				 }
		//				 else if (cmd == "thickness") { // толщина линии
		//					 s >> thickness; // считываем значение толщины

		//				 }
		//				 else if (cmd == "path") { // набор точек
		//					 vector<vec2> vertices; // список точек ломаной
		//					 int N; // количество точек
		//					 s >> N;
		//					 string str1; // дополнительная строка для чтения из файла
		//					 while (N > 0) { // пока не все точки считали
		//						 getline(in, str1); // считываем в str1 из входного файла очередную строку
		//						 // так как файл корректный, то на конец файла проверять не нужно
		//						 if ((str1.find_first_not_of(" \t\r\n") != string::npos) && (str1[0] != '#')) {
		//							 // прочитанная строка не пуста и не комментарий
		//								// значит в ней пара координат
		//							 float x, y; // переменные для считывания
		//							 stringstream s1(str1); // еще один строковый поток из строки str1
		//							 s1 >> x >> y;
		//							 vertices.push_back(vec2(x, y)); // добавляем точку в список
		//							 N--; // уменьшаем счетчик после успешного считывания точки

		//						 }

		//					 }
		//					 // все точки считаны, генерируем ломаную (path) и кладем ее в список figure
		//					 figure.push_back(path(vertices, vec3(r, g, b), thickness));

		//				 }
		//				 else if (cmd == "model") { // начало описания нового рисунка

		//					 float mVcx, mVcy, mVx, mVy; // параметры команды model
		//					 s >> mVcx >> mVcy >> mVx >> mVy; // считываем значения переменных
		//					 float S = mVx / mVy < 1 ? 2.f / mVy : 2.f / mVx;
		//					 // сдвиг точки привязки из начала координат в нужную позицию
		//						 // после которого проводим масштабирование
		//					 initM = scale(S) * translate(-mVcx, -mVcy);
		//					 figure.clear();

		//				 }
		//				 else if (cmd == "figure") { // формирование новой модели
		//					 models.push_back(model(figure, M * initM));

		//				 }
		//				 else if (cmd == "translate") { // перенос
		//					 float Tx, Ty; // параметры преобразования переноса
		//					 s >> Tx >> Ty; // считываем параметры
		//					 M = translate(Tx, Ty) * M; // добавляем перенос к общему преобразованию

		//				 }
		//				 else if (cmd == "scale") { // масштабирование
		//					 float S; // параметр масштабирования
		//					 s >> S; // считываем параметр
		//					 M = scale(S) * M; // добавляем масштабирование к общему преобразованию

		//				 }
		//				 else if (cmd == "rotate") { // поворот
		//					 float theta; // угол поворота в градусах
		//					 s >> theta; // считываем параметр
		//					 M = rotate(-theta / 180.f * Math::PI) * M; // добавляем поворот к общему преобразованию

		//				 }
		//				 else if (cmd == "pushTransform") { // сохранение матрицы в стек
		//					 transforms.push_back(M); // сохраняем матрицу в стек

		//				 }
		//				 else if (cmd == "popTransform") { // откат к матрице из стека
		//					 M = transforms.back(); // получаем верхний элемент стека
		//					 transforms.pop_back(); // выкидываем матрицу из стека
		//				 }
		//			 }	 
		//				 // считываем очередную строку
		//			 // считываем очередную строку
		//				 getline(in, str);	
		//		}
		//		 Refresh();
		//	}
		//}
	}
};
}
