Turbo Assembler	 Version 2.0	    11/29/24 08:48:21	    Page 1
Task44.asm



      1	0000			     .model small
      2	0000			     .stack 100h	     ; Сегмент стека
      3				     .186		      ;	Разрешение трансляции команд		    +
      4				     процессора 80186
      5	0000			     .data		       ; Сегмент	данных
      6
      7	0000  14*(00)		     array db 20 dup(0)	     ; Массив simple, содержащий 20 чисел
      8	0014  20 20 20 20 20 20	24   result db '      ', '$' ; Строка символов result для вывода	чисел  +
      9				     на экран (ширина 6 символов)
     10	001B  0D 0A 24		     nl	db 13, 10, '$'	     ; Строка nl для перевода курсора вниз и   +
     11				     возврата к левому краю экрана
     12
     13	001E			     .code		      ;	Сегмент кода
     14	0000			     start:		      ;	Точка входа в программу
     15
     16	0000  B8 0000s			 mov ax, @data	     ; Инициализация сегментного регистра DS
     17	0003  8E D8			 mov ds, ax	     ; Установка сегмента данных
     18
     19					 ; Заполняем первую половину массива кратными 5
     20	0005  B9 000A			 mov cx, 10	     ; Число шагов в	цикле (10)
     21	0008  BB 0000			 mov bx, 0	     ; Индекс для массива
     22	000B  B0 05			 mov al, 5	     ; Начальное значение кратного 5
     23	000D			     fill_multiples:
     24	000D  88 87 0000r		     mov array[bx], al ; Сохраняем число кратное 5	в массив
     25	0011  04 05			     add al, 5	      ;	Увеличиваем значение	кратного 5
     26	0013  43			     inc bx	       ; Переход	к следующему	элементу	    +
     27				     массива
     28	0014  E2 F7			     loop fill_multiples
     29
     30					 ; Заполняем вторую половину массива квадратами	    +
     31				     кратных 5
     32	0016  B9 000A			 mov cx, 10	     ; Число шагов в	цикле (10)
     33	0019  BB 000A			 mov bx, 10	    ; Индекс для массива (начинаем с 10-го	    +
     34				     элемента)
     35	001C  B0 05			 mov al, 5	     ; Начальное значение кратного 5
     36	001E			     fill_squares:
     37	001E  8A E0			     mov ah, al	      ;	AH = AL	(для	умножения)
     38	0020  F6 E4			     mul ah	      ;	AL = AL	* AL (квадрат)
     39	0022  88 87 0000r		     mov array[bx], al ; Сохраняем квадрат числа в массив
     40	0026  04 05			     add al, 5	      ;	Увеличиваем значение	кратного 5
     41	0028  43			     inc bx	       ; Переход	к следующему	элементу	    +
     42				     массива
     43	0029  E2 F3			     loop fill_squares
     44
     45					 ; Вывод массива на экран в	виде таблицы	2x10
     46	002B  B9 0014			 mov cx, 20	     ; Число шагов в	цикле (20 элементов)
     47	002E  BB 0000			 mov bx, 0	     ; Индекс для массива
     48	0031  BA 0000			 mov dx, 0	     ; Счетчик строк (0 - первая строка)
     49	0034			     print_array:
     50	0034  8A 87 0000r		     mov al, array[bx] ; Загружаем элемент массива
     51	0038  E8 0016			     call byte_asc     ; Преобразование числа в строку
     52	003B  BA 001Br			     lea dx, nl	       ; Перевод	курсора вниз	после каждой	    +
     53				     строки
     54	003E  CD 21			     int 21h		; Вызов DOS для	вывода новой	строки
     55	0040  43			     inc bx	       ; Переход	к следующему	элементу	    +
     56				     массива
     57	0041  42			     inc dx	       ; Увеличиваем	счетчик строк
Turbo Assembler	 Version 2.0	    11/29/24 08:48:21	    Page 2
Task44.asm



     58	0042  83 FA 01			     cmp dx, 1		; Проверяем, достигли ли конца первой +
     59				     строки
     60	0045  7C ED			     jl	print_array	; Если нет, продолжаем	вывод
     61	0047  BA 0000			     mov dx, 0		 ; Обнуляем счетчик строк для второй   +
     62				     строки
     63	004A  EB E8			     jmp print_array	; Продолжаем вывод с начала второй	    +
     64				     строки
     65
     66	004C  B8 4C00			 mov ax, 4C00h	     ; Завершение программы
     67	004F  CD 21			 int 21h
     68
     69	0051			     byte_asc proc	      ;	Процедура преобразования	числа в	    +
     70				     строку
     71	0051  60			 pusha		      ;	Сохраняем все регистры общего		    +
     72				     назначения
     73	0052  B9 0006			 mov cx, 6	      ;	Максимальная длина строки (6 символов)
     74	0055  BF 0019r			 lea di, result	+ 5   ;	Указываем на	начало строки (справа	    +
     75				     налево)
     76	0058  8B 45 FB			 mov ax, [di - 5]     ;	Загружаем число из массива
     77	005B  B3 0A			 mov bl, 10	     ; Основание системы счисления		    +
     78				     (десятичная)
     79	005D  B4 00			 mov ah, 0	     ; Обнуляем	AH
     80	005F  33 C9			 xor cx, cx	     ; Счетчик цифр
     81	0061			     convert_loop:
     82	0061  F6 F3			 div bl		      ;	Делим AX на 10 (результат в AL, остаток	в  +
     83				     AH)
     84	0063  80 C4 30			 add ah, '0'	      ;	Преобразуем остаток в символ
     85	0066  4F			 dec di		     ; Двигаемся влево по строке
     86	0067  88 25			 mov [di], ah	      ;	Сохраняем символ	в строке
     87	0069  41			 inc cx		      ;	Увеличиваем счетчик цифр
     88	006A  85 C0			 test ax, ax	      ;	Проверяем, не ноль ли AX
     89	006C  75 F3			 jnz convert_loop      ; Если не ноль, продолжаем			    +
     90				     преобразование
     91
     92	006E  BA 0014r			 lea dx, result	      ;	Загружаем адрес строки для вывода
     93	0071  B4 09			 mov ah, 09h	      ;	Функция вывода строки
     94	0073  CD 21			 int 21h	      ;	Вызов DOS для вывода строки
     95
     96	0075  61			 popa		      ;	Восстанавливаем регистры	общего	    +
     97				     назначения
     98	0076  C3			 ret		      ;	Возврат в точку вызова
     99	0077			     byte_asc endp	     ; Конец процедуры
    100
    101				     end start		      ;	Конец программы
Turbo Assembler	 Version 2.0	    11/29/24 08:48:21	    Page 3
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "11/29/24"
??FILENAME			  Text	 "Task44  "
??TIME				  Text	 "08:48:21"
??VERSION			  Number 0200
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TASK44
@MODEL				  Text	 2
@WORDSIZE			  Text	 2
ARRAY				  Byte	 DGROUP:0000
BYTE_ASC			  Near	 _TEXT:0051
CONVERT_LOOP			  Near	 _TEXT:0061
FILL_MULTIPLES			  Near	 _TEXT:000D
FILL_SQUARES			  Near	 _TEXT:001E
NL				  Byte	 DGROUP:001B
PRINT_ARRAY			  Near	 _TEXT:0034
RESULT				  Byte	 DGROUP:0014
START				  Near	 _TEXT:0000

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  001E Word	  Public  DATA
_TEXT				  16  0077 Word	  Public  CODE
